#1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год».
# В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год и преобразовывать их тип к типу «Число».
# Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и года (например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных данных.


class Date:
    def __init__(self, day_month_year):
        self.day_month_year = str(day_month_year)


    @classmethod
    def extract(cls, day_month_year):
        my_date = []

        for i in day_month_year.split():
            if i != '-': my_date.append(i)

        return int(my_date[0]), int(my_date[1]), int(my_date[2])


    @staticmethod
    def valid(day, month, year):

        if 1 <= day <= 31:
            if 1 <= month <= 12:
                if 2020 >= year >= 0:
                    return f'All right'
                else:
                    return f'Wrong year'
            else:
                return f'Wrong month'
        else:
            return f'Wrong day'

    def __str__(self):
        return f'Current day {Date.extract(self.day_month_year)}'


today = Date('17 - 03 - 2020')
print(today)
print(Date.valid(11, 11, 2020))
print(today.valid(11, 12, 2020))
print(Date.extract('11 - 11 - 2011'))
print(today.extract('11 - 11 - 2020'))
print(Date.valid(1, 11, 2000))


#2.Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль.
# Проверьте его работу на данных, вводимых пользователем.
# При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту ситуацию и не завершиться с ошибкой.


class DivisionByZero:
    def __init__(self, divider, denominator):
        self.divider = divider
        self.denominator = denominator

    @staticmethod
    def divide_by_zero(divider, denominator):
        try:
            return (divider / denominator)
        except:
            return (f"На ноль делить нельзя")


div = DivisionByZero(7, 100)
print(DivisionByZero.divide_by_zero(10, 0))
print(DivisionByZero.divide_by_zero(10, 0.7))
print(div.divide_by_zero(100, 0))print(div.divide_by_null(100, 0))


#3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
#Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
#Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
#При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.


class Error:
    def __init__(self, *args):
        self.my_list = []

    def my_input(self):
        while True:
            try:
                val = int(input('Введите значения и нажимайте Enter - '))
                self.my_list.append(val)
                print(f'Текущий список - {self.my_list} \n ')
            except:
                print(f"Недопустимое значение - строка и булево")
                y_or_n = input(f'Попробовать еще раз? Y/N ')

                if y_or_n == 'Y' or y_or_n == 'y':
                    print(try_except.my_input())
                elif y_or_n == 'N' or y_or_n == 'n':
                    return f'Вы вышли'
                else:
                    return f'Вы вышли'


try_except = Error(1)
print(try_except.my_input())


#4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад.
# А также класс «Оргтехника», который будет базовым для классов-наследников. Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс).
# В базовом классе определить параметры, общие для приведенных типов. В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники.
#5. Продолжить работу над первым заданием.
# Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании.
# Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных, можно использовать любую подходящую структуру, например словарь.
#6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных.
# Например, для указания количества принтеров, отправленных на склад, нельзя использовать строковый тип данных.
#Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.


DATABASE = {
    'departments': {
        1: [],
        2: []
    }
}


class BaseStorageItem:
    COMPANY = "Kustov Inc."
    CURRENCY = 'RUB'
    DELIVERY_COST = 0
    WEIGHT = None
    SIZE = None
    COST = None


class Warehouse:

    def __init__(self):
        self._items = []

    def receive_item(self, item: BaseStorageItem, count: int):
        if not isinstance(count, int) or count <= 0:
            print('ItemCountError')

        if not isinstance(item, BaseStorageItem):
            print('ItemSignatureError')

        self._items.append(
            dict(
                name=item.__class__.__name__,
                item=item,
                count=count
            )
        )

    def transport_all_items_to_department(self, dep_id):
        department = DATABASE['departments'][dep_id]
        if self._items:
            department.extend(self._items)
            self._items = []
            return
        print('Items have not loaded.')


class Printer(BaseStorageItem):
    WEIGHT = 50
    SIZE = "20x50x20"
    COST = 4500


class Scanner(BaseStorageItem):
    WEIGHT = 40
    SIZE = "20x30x70"
    COST = 5000


class Xerox(BaseStorageItem):
    WEIGHT = 600
    SIZE = "70x70x70"
    COST = 10000


if __name__ == '__main__':
    printer = Printer()
    scanner = Scanner()
    warehouse = Warehouse()
    # Collect and send printers
    warehouse.receive_item(printer, 7)
    warehouse.transport_all_items_to_department(1)
    # Collect and send scanners
    warehouse.receive_item(scanner, 7)
    warehouse.transport_all_items_to_department(2)
    print(DATABASE)
    warehouse.receive_item(scanner, '5')
    warehouse.receive_item(scanner, -1)
    warehouse.receive_item('scanner', 5)


#7. Реализовать проект «Операции с комплексными числами».
# Создайте класс «Комплексное число», реализуйте перегрузку методов сложения и умножения комплексных чисел.
# Проверьте работу проекта, создав экземпляры класса (комплексные числа) и выполнив сложение и умножение созданных экземпляров.
# Проверьте корректность полученного результата.


class ComplexNumber:
    def __init__(self, a, b, *args):
        self.a = a
        self.b = b
        self.x = 'a + b * i'

    def __add__(self, other):
        print(f'Сумма z1 и z2 равна: ')
        return f'x = {self.a + other.a} + {self.b + other.b} * i'

    def __mul__(self, other):
        print(f'Произведение x1 и x2 равно:')
        return f'x = {self.a * other.a - (self.b * other.b)} + {self.b * other.a} * i'

    def __str__(self):
        return f'x = {self.a} + {self.b} * i'


x_1 = ComplexNumber(61, -2)
x_2 = ComplexNumber(6, -9)
print(x_1)
print(x_1 + x_2)
print(x_1 * x_2)
