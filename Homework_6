#1. Создать класс TrafficLight (светофор) и определить у него один атрибут color (цвет) и метод running (запуск).
# Атрибут реализовать как приватный.
# В рамках метода реализовать переключение светофора в режимы: красный, желтый, зеленый.
# Продолжительность первого состояния (красный) составляет 7 секунд, второго (желтый) — 2 секунды, третьего (зеленый)
# — на ваше усмотрение.
# Переключение между режимами должно осуществляться только в указанном порядке (красный, желтый, зеленый).
#Проверить работу примера, создав экземпляр и вызвав описанный метод.
#Задачу можно усложнить, реализовав проверку порядка режимов,
#и при его нарушении выводить соответствующее сообщение и завершать скрипт.

from time import sleep

class TrafficLight:
    __color = ['red', 'yellow', 'green']

    def running(self):
        i = 0
        while True:
            print(f'{self.__color[i]}')
            if i % 3 == 0 or i % 3 == 2:
                sleep(7)
            else:
                sleep(2)
            i += 1

TrafficLight = TrafficLight()
TrafficLight.running()


#2. Реализовать класс Road (дорога), в котором определить атрибуты: length (длина), width (ширина).
# Значения данных атрибутов должны передаваться при создании экземпляра класса.
# Атрибуты сделать защищенными.
# Определить метод расчета массы асфальта, необходимого для покрытия всего дорожного полотна.
# Использовать формулу: длина * ширина * масса асфальта для покрытия одного кв метра дороги асфальтом,
# толщиной в 1 см * чи сло см толщины полотна.
# Проверить работу метода.
#Например: 20м * 5000м * 25кг * 5см = 12500 т

class Road:
    def __init__(self, _length, _width):
        self.length = _length
        self.width = _width
        print(f'Параметры дороги: длина - {self.length}м.; ширина - {self.width}м.')

    def massRoad(self):
        weight = 25
        thikness = 5
        mass = self.length * self.width * weight * thikness / 1000
        print(f'Необходимо {mass} тонн асфальта')

road = Road(20, 5000)
road.massRoad()


#3. Реализовать базовый класс Worker (работник),
# в котором определить атрибуты: name, surname, position (должность), income (доход).
# Последний атрибут должен быть защищенным и ссылаться на словарь,
# содержащий элементы: оклад и премия, например, {"wage": wage, "bonus": bonus}.
# Создать класс Position (должность) на базе класса Worker.
# В классе Position реализовать методы получения полного имени сотрудника (get_full_name)
# и дохода с учетом премии (get_total_income).
# Проверить работу примера на реальных данных (создать экземпляры класса Position, передать данные,
# проверить значения атрибутов, вызвать методы экземпляров).


class Worker:
    def __init__(self, name, surname, position, wage, bonus):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {'wage': wage, 'bonus' : bonus}

class Position(Worker):

    def get_full_name(self):
        return self.name + ' ' + self.surname

    def get_total_income(self):
        return self._income.get('wage') + self._income.get('bonus')

employee = Position('Альберт', 'Акчурин', 'Блоггер', 10, 20)
print(f'Доход сотрудника:\n{employee.get_full_name()} / {(employee.position)} / {employee.get_total_income()}RUB')


#4. Реализуйте базовый класс Car.
# У данного класса должны быть следующие атрибуты: speed, color, name, is_police (булево).
# А также методы: go, stop, turn(direction), которые должны сообщать, что машина поехала, остановилась, повернула (куда).
# Опишите несколько дочерних классов: TownCar, SportCar, WorkCar, PoliceCar.
# Добавьте в базовый класс метод show_speed, который должен показывать текущую скорость автомобиля.
# Для классов TownCar и WorkCar переопределите метод show_speed.
# При значении скорости свыше 60 (TownCar) и 40 (WorkCar) должно выводиться сообщение о превышении скорости.
#Создайте экземпляры классов, передайте значения атрибутов.
# Выполните доступ к атрибутам, выведите результат.
# Выполните вызов методов и также покажите результат.


class Car:
    def __init__(self, speed, color, name, is_police):
        self.speed = speed
        self.color = color
        self.name = name
        self.is_police = is_police
    def go(self):
        print(f'{self.name} {self.color} начало движения.')
    def stop(self):
        print(f'{self.name} {self.color} остановка.')
    def turn(self):
        print(f'{self.name} {self.color} повернул на {direction}.')
    def show_speed(self):
        print(f'{self.name} {self.color} скорость движения {self.speed} км/ч.')

class TownCar(Car):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def show_speed(self):
        return f'{self.name} {self.color} привышение скорости на {self.speed - 60} км/ч.' if (self.speed > 60) else \
            Car.show_speed(self)

class SportCar(Car):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

class WorkCar(Car):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def show_speed(self):
        return f'{self.name} {self.color} привышение скорости на {self.speed - 40} км/ч.' if (self.speed > 40) else \
            Car.show_speed(self)

class PoliceCar(Car):
    def __init__(self, speed, color, name, is_Police = True):
        super().__init__(speed, color, name, is_Police)
        if self.is_police:
            print(f'Это ПОЛИЦИЯ: {self.name} {self.color}')


sport_auto = SportCar(170, 'Жёлтый', 'Жигули', False)
print(sport_auto.turn('направо'))
print(sport_auto.show_speed())

town_auto = TownCar(70, 'Чёрный', 'Хёндэ', False)
print(town_auto.go)
print(town_auto.show_speed())

police_auto = PoliceCar(200, 'Зелёный', 'Запорожец',True)
print(police_auto.go)
print(police_auto.show_speed())

work_auto = WorkCar(80, '<Белый>', 'Фольксваген',False)
print(work_auto.turn('направо'))
print(work_auto.show_speed())


# 5. Реализовать класс Stationery (канцелярская принадлежность).
# Определить в нем атрибут title (название) и метод draw (отрисовка).
# Метод выводит сообщение “Запуск отрисовки.”
# Создать три дочерних класса Pen (ручка), Pencil (карандаш), Handle (маркер).
# В каждом из классов реализовать переопределение метода draw.
# Для каждого из классов методы должен выводить уникальное сообщение.
# Создать экземпляры классов и проверить, что выведет описанный метод для каждого экземпляра.


class Stationary:
    def __init__(self, title):
        self.title = title

    def draw(self):
        return f'Запуск отрисовки.'

class Pen(Stationary):

    def draw(self):
        return f'{self.title}: Шариковая ручка'

class Pencil(Stationary):

     def draw(self):
        return f'{self.title}: 2B'

class Handle(Stationary):

    def draw(self):
        return f'{self.title}: Фломастер'

pencil = Pencil('Карандаш')
print(pencil.draw())
pen = Pen('Ручка')
print(pen.draw())
handle = Handle('Маркер')
print(handle.draw())
